--- init.git	2022-09-25 11:42:57.577028000 +1000
+++ init.singly	2022-10-03 12:05:00.963018220 +1000
@@ -28,8 +28,8 @@
 L_UPGRADE_NO="Backing off, not using personal storage, booting in RAM only, PUPMODE=5..."
 L_LOADING_FROM_CD="Loading folder %s from CD/DVD..." #printf
 L_RAM_DISK_FULL="RAM disk full, copy failed at %s" #printf
-L_ADDING_SAVE_LAYER_FAILED="adding %s to aufs stack failed." #printf
 L_WAITING_FOR_DEV='Waiting %s seconds for slow storage devices.' #printf
+L_TAR_ARCHIVE_FAILED="Extracting tar archive %s failed." #printf
 L_WAITING_FOR_PART='Waiting for partition [%s]' #printf
 L_LOADING_KEYBOARD_LAYOUT="Loading '%s' keyboard layout..." #printf
 L_COPY_MESSAGE="copying to ram"
@@ -45,7 +45,7 @@
 L_SWITCH_ROOT="Performing a 'switch_root' to the %s filesystem..." #printf
 L_FOLDER_MARKED_BAD="Folder %s marked bad." #printf
 L_0_NONE="0  none"
-L_ERROR_FAILED_AUFS_STACK='Failed to create empty aufs stack'
+L_ERROR_FAILED_STACK="Failed to create %s stack." #printf
 L_ADDING_MODULE="Adding module %s" #printf
 L_NO_DISTRO_SPECS="No DISTRO_SPECS file found, assuming that personal storage is empty."
 L_DEBUG_SAVE="To save debug info to a partition, type 'debugsave'"
@@ -75,21 +75,6 @@
 . /etc/rc.d/functions_x
 export DISTRODESC="${DISTRO_NAME} ${DISTRO_VERSION} - Linux ${KERNELVER} - `uname -m`"
 
-#precaution - if DISTRO_SPECS was not processed by 3builddistro...
-[ ! "$DISTRO_ZDRVSFS" ] && DISTRO_ZDRVSFS="zdrv_${DISTRO_FILE_PREFIX}_${DISTRO_VERSION}.sfs"
-[ ! "$DISTRO_FDRVSFS" ] && DISTRO_FDRVSFS="fdrv_${DISTRO_FILE_PREFIX}_${DISTRO_VERSION}.sfs"
-[ ! "$DISTRO_ADRVSFS" ] && DISTRO_ADRVSFS="adrv_${DISTRO_FILE_PREFIX}_${DISTRO_VERSION}.sfs"
-[ ! "$DISTRO_YDRVSFS" ] && DISTRO_YDRVSFS="ydrv_${DISTRO_FILE_PREFIX}_${DISTRO_VERSION}.sfs"
-[ ! "$DISTRO_BDRVSFS" ] && DISTRO_BDRVSFS="bdrv_${DISTRO_FILE_PREFIX}_${DISTRO_VERSION}.sfs"
-[ ! "$DISTRO_PUPPYSFS" ] && DISTRO_PUPPYSFS="puppy_${DISTRO_FILE_PREFIX}_${DISTRO_VERSION}.sfs"
-
-# filenames specified in DISTRO_SPECS: DISTRO_ZDRVSFS, DISTRO_PUPPYSFS...
-Z_DEF_FN="$DISTRO_ZDRVSFS"
-F_DEF_FN="$DISTRO_FDRVSFS"
-A_DEF_FN="$DISTRO_ADRVSFS"
-Y_DEF_FN="$DISTRO_YDRVSFS"
-B_DEF_FN="$DISTRO_BDRVSFS"
-P_DEF_FN="$DISTRO_PUPPYSFS"
 KBUILD_DEF_FN="kbuild-$KERNELVER.sfs"
 
 if [ ! "$LOGLEVEL" ] ; then
@@ -105,9 +90,18 @@
 #Filesystem to be fsck
 FSCKLIST="ext2|ext3|ext4|vfat|msdos|exfat"
 
-# Layered file system to use
+# Default layered file system
 UNIONFS='aufs'
 
+# ?drv_...sfs files to load below puppy_...sfs
+#APPEND_DRVS="q r s t u v w x"
+APPEND_DRVS="f z"
+
+# ?drv_...sfs files to load above puppy_...sfs
+# must be in reverse order, all inserted as branch 1
+#PREPEND_DRVS="o n m l j i h g e d c"
+PREPEND_DRVS="y b a k"
+
 #=============================================================
 #                        FUNCTIONS
 #=============================================================
@@ -168,22 +162,6 @@
   fi
 }
 
-decode_spec() {
- #${1} = an sfs spec e.g. sdb2:/pup/test_it.sfs
- ONE_BP_ID=""; ONE_BP_FN=""
- [ "${1}" ] || return
- case "${1}" in
-  *:*) ONE_BP_ID="${1%%:*}"; ONE_BP_FN="${1#*:}" ;;
-  *) ONE_BP_ID="${1}" ;;
- esac
- if [ "$ONE_BP_FN" ];then
-  case "$ONE_BP_FN" in
-   */*) [ "${ONE_BP_FN:0:1}" != "/" ] && ONE_BP_FN="/$ONE_BP_FN" ;;
-   *) ONE_BP_FN="$PSUBDIR/$ONE_BP_FN" ;;
-  esac
- fi
-}
-
 wait_for_blkid() {
  # $1 value to look for
  # $2 type of value 'id|fs'
@@ -204,9 +182,13 @@
   sleep 1
   echo -en "\\033[1;33m.\\033[0;39m" >/dev/console #yellow dot
  done
- [ "$PART" ] && BLKID_PART="$PART"
+ if [ "$PART" ];then
+  BLKID_PART="$PART"
+ else
+  echo "Partition ${1} not found."
+ fi
+ get_part_info
  if [ "$DIDMSG" ];then
-  get_part_info
   if [ "$PART" ];then
    check_status 0
   else
@@ -226,27 +208,6 @@
  ONE_PART="$BLKID_PART"
 }
 
-decode_other_ids() {
- #get ONE_PART from DEV or ID specified in sfs boot params
- decode_id "$Z_BP_ID"
- [ "$ONE_PART" ] && { Z_PART="$ONE_PART"; Z_BP_ID=""; }
- decode_id "$F_BP_ID"
- [ "$ONE_PART" ] && { F_PART="$ONE_PART"; F_BP_ID=""; }
- decode_id "$A_BP_ID"
- [ "$ONE_PART" ] && { A_PART="$ONE_PART"; A_BP_ID=""; }
- decode_id "$Y_BP_ID"
- [ "$ONE_PART" ] && { Y_PART="$ONE_PART"; Y_BP_ID=""; }
- decode_id "$B_BP_ID"
- [ "$ONE_PART" ] && { B_PART="$ONE_PART"; B_BP_ID=""; }
- decode_id "$SAVE_BP_ID"
- [ "$ONE_PART" ] && { SAVEPART="$ONE_PART"; PSAVEPART="$ONE_PART"; SAVE_BP_ID=""; }
-}
-
-log_part_id() {
-# "$1" - partition id - ex: Work or sdc4
- echo "Partition ${1} not found."
-}
-
 ensure_mounted() {
 # "$1" - partition - ex: sda3
 # "$2" - mountpoint - ex: /mnt/pdrv
@@ -297,10 +258,10 @@
   if [ "$ONE_MP" != "$SAVE_MP" ];then
    #ensure SAVEPART is mounted on /mnt/dev_save
    [ -d "$SAVE_MP" ] || mkdir -p $SAVE_MP
-   OPT="move"
-   [ "$UNIONFS" = 'overlay' ] && OPT="bind"
-   echo "mount -o $OPT $ONE_MP $SAVE_MP" #debug
-   mount -o $OPT $ONE_MP $SAVE_MP
+   echo "mount -o move $ONE_MP $SAVE_MP" #debug
+   mount -o move $ONE_MP $SAVE_MP
+   #re-establish P_MP if PDRV was the moved partition MP
+   [ "$SAVEPART" = "$P_PART" ] && P_MP="$SAVE_MP"
   fi
   SAVE_FS="$ONE_FS"
  else
@@ -308,74 +269,176 @@
  fi
 }
 
-find_drv_file() {
-# "$1" - specified filename - ex: /pup/mydrv-1.2.3.sfs
-# "$2" - default filename - ex: adrv_tahr_6.0.5.sfs
-# "$3" - look under root too - ex. 1
- ONE_FN=""
- [ "${1}" ] || [ "${2}" ] || return
- if [ "${1}" ];then
-  case ${1} in
-   */) ONE_TRY_FN="${1}${2}" ;;
-   *) ONE_TRY_FN="${1}" ;;
+#dismember, separate, enumerate
+interpret_spec() {
+  # $1 = drv-spec
+  # $2 = drvId e.g. 'a','f'
+  # uses $ONE_DEF_FN
+  # on exit:
+  # $SPEC_PART contains the partition name
+  # $SPEC_MP contains it's mount-point
+  # $SPEC_FS contains it's filesystem
+  # $SPEC_REL_FN contains the relative-filename
+  # so file is "${SPEC_MP}${SPEC_REL_FN}"
+  echo "interpret_specIN 1=$1 2=$2"
+  SPEC_PART=''; SPEC_REL_FN=''; SPEC_MP=''; SPEC_FS=''
+  [ "$1" ] || return 1
+  [ "$2" ] || return 1
+  local PART REL
+  case "${1}" in
+    *:*) PART="${1%%:*}"; REL="${1#*:}" ;;
+    *) PART="$1"; REL='' ;;
   esac
- else
-  ONE_TRY_FN="${PSUBDIR}/${2}"
-  [ "$3" -a ! -e "${ONE_MP}${ONE_TRY_FN}" ] && ONE_TRY_FN="/$2"
- fi
- if [ -L "${ONE_MP}${ONE_TRY_FN}" ];then
-   C_MP="$(readlink -f "$ONE_MP")"
-   ONE_TRY_FN="$(readlink -f "${C_MP}${ONE_TRY_FN}")"
-   ONE_TRY_FN="${ONE_TRY_FN#${C_MP}}"
- fi
- [ -f "${ONE_MP}${ONE_TRY_FN}" ] && ONE_FN="$ONE_TRY_FN"
+  [ "$REL" ] || REL="$ONE_DEF_FN"
+  if [ "$PART" = 'rootfs' ];then
+    SPEC_PART="$PART"
+    SPEC_REL_FN="$REL"
+    SPEC_FS='rootfs'
+    echo "interpret_specOUT SPEC_PART=$SPEC_PART SPEC_MP=$SPEC_MP SPEC_FS=$SPEC_FS SPEC_REL_FN=$SPEC_REL_FN"
+    return
+  fi
+  if [ "$PART" ];then
+    decode_id "$PART"
+    [ "$ONE_PART" ] || return
+    PART="$ONE_PART"
+  else
+    PART="$P_PART"
+  fi
+  if [ "$REL" ];then
+    case "$REL" in
+      */) REL="/${REL#/}"; REL="${REL}${ONE_DEF_FN}" ;;
+      */*) REL="/${REL#/}" ;;
+      *) REL="$PSUBDIR/$REL" ;;
+    esac
+  fi
+  if [ "$PART" ];then
+    ensure_mounted "$PART" "/mnt/${2}drv" #sets ONE_MP and ONE_FS
+    if [ "$ONE_MP" ];then
+      SPEC_MP="$ONE_MP"
+      SPEC_FS="$ONE_FS"
+      SPEC_PART="$PART"
+      SPEC_REL_FN="$REL"
+      echo "interpret_specOUT SPEC_PART=$SPEC_PART SPEC_MP=$SPEC_MP SPEC_FS=$SPEC_FS SPEC_REL_FN=$SPEC_REL_FN"
+    fi
+  fi
 }
 
-find_onepupdrv() {
-# "$1" - partition - ex: sda3
-# "$2" - specified filename - ex: /pup/mydrv-1.2.3.sfs
-# "$3" - default filename - ex: adrv_tahr_6.0.5.sfs
-# "$4" - prefix for "drv" mountpoint - ex: a
-# "$5" - look under root too - ex. 1
- ONE_FN=""
- [ "${2}" ] || [ "${3}" ] || return
- [ "${4}" ] || return
- if [ "${1}" ];then
-  ONE_PART="${1}"
- else
-  ONE_PART="$P_PART"
- fi
- [ "$ONE_PART" ] || return
- ensure_mounted "$ONE_PART" "/mnt/${4}drv"
- [ "$ONE_MP" ] || return
- find_drv_file "${2}" "${3}" "${5}"
- [ "$ONE_FN" = "" -a "${2}" ] && echo "$ONE_PART, $ONE_TRY_FN file not found."
+find_drv_file() {
+# "$1" - mount point - ex:  /mnt/pdrv
+# "$2" - relative filename - ex: /pup/mydrv-1.2.3.sfs
+  ONE_FN=""
+  [ "${2}" ] || return
+  local SFS_FFN="${1}${2}"
+  [ -e "${SFS_FFN}" ] || return
+  local TRY_FN="$2"
+  if [ -L "$SFS_FFN" ];then
+    local LNK_SFS="$(realpath "$SFS_FFN")"
+    if [ "$1" ];then
+      local C_MP="$(realpath "$1")"
+      TRY_FN="${LNK_SFS#${C_MP}}"
+    else
+      TRY_FN="$LNK_SFS"
+    fi
+    # if it's on a different partition, it should fail the '-f' test below
+    # which is the way it's supposed to work
+  fi
+  if [ -f "${1}${TRY_FN}" ];then
+    ONE_FN="$TRY_FN"
+    [ "$LNK_SFS" ] && echo "${2} -> ${ONE_FN}"
+  fi
 }
 
-setup_onepupdrv() {
-# "$1" - sfs spec - ex: sdb2,ext4,/pup/mydrv-1.2.3.sfs
-# "$2" - suffix for "pup_" branch directory - ex: a
-# "$3" - prepend after rw layer indicator - ex: p
- ONE_LAYER=""
- ONE_PART="$(echo "${1}" | cut -f 1 -d ',')"
- [ "$ONE_PART" ] || return 1
- ONE_REL_FN="$(echo "${1}" | cut -f 3 -d ',')"
- [ "$ONE_REL_FN" ] || return 1
- ONE_SFX="${2}"
- ONE_PREP="${3}"
- if [ "$ONE_PART" = "rootfs" ];then #humongous initrd.
-  ONE_MP="" #actually it's '/'.
-  COPY2RAM='yes' #actually it is already in ram, but load_sfs_file code puts it in a tmpfs.
- else
-  if [ "$ONE_PART" = "$P_PART" ];then
-   ONE_MP="$P_MP"
+do_one_sfs_spec() {
+  # $1 = sfs-spec
+  # $2 = drvId  e.g. 'a' or 'f'
+  # $3 = disposition 'a' or 'p' for 'append|prepend'
+    interpret_spec "$1" "$2"
+    [ "$SPEC_PART" ] || return 11
+    find_drv_file "$SPEC_MP" "$SPEC_REL_FN"
+    [ "$ONE_FN" ] || return 13
+    SPEC_REL_FN="$ONE_FN"
+    setup_onepupdrv "${2}" "${3}"
+    return $?
+}
+
+process_one_sfs() {
+  # $1 = drvId  e.g. 'a' or 'f'
+  # $2 = disposition 'a' or 'p' for 'append|prepend'
+  # for current "setup_onepupdrv" $2 is '' or 'p'
+  # sets $SPEC_REL_FN if the original was a symbolic link
+  echo "process_one_sfsIN 1=$1 2=$2"
+  [ "$1" ] || return 1
+  local ONE_SFS_SPEC ROOTFS_SPEC SPEC_VAR
+  ONE_SFS_SPEC=''; ROOTFS_SPEC=''
+  # set default filename
+  if [ "$1" = 'p' ];then
+    ONE_DEF_FN="$DISTRO_PUPPYSFS"
+    [ "$ONE_DEF_FN" ] || ONE_DEF_FN="puppy_${DISTRO_FILE_PREFIX}_${DISTRO_VERSION}.sfs"
+  elif [ "$1" = 'k' ];then
+    ONE_DEF_FN="$KBUILD_DEF_FN"
   else
-   ONE_MP="$(mount | grep -m1 "/dev/$ONE_PART " | cut -f 3 -d ' ')"
-   [ "$ONE_MP" ] || return 2
+    DIST_VAR="DISTRO_$(echo -n "$1" | tr '[:lower:]' '[:upper:]')DRVSFS"
+    eval ONE_DEF_FN="\$$DIST_VAR"
+    [ "$ONE_DEF_FN" ] || ONE_DEF_FN="${1}drv_${DISTRO_FILE_PREFIX}_${DISTRO_VERSION}.sfs"
+  fi
+  # check for humongous initrd
+  [ -e "/$ONE_DEF_FN" ] && ROOTFS_SPEC="rootfs:/${ONE_DEF_FN}"
+  # give precedence to boot parameter
+  if [ "$1" = 'p' ];then
+    if [ "$ROOTFS_SPEC" = "" ];then
+      [ "$PDRV" ] || return 9
+      ONE_SFS_SPEC="$PDRV"
+    else
+      case "$PDRV" in
+        *:*) ONE_SFS_SPEC="$PDRV" ;;
+        *) ;;
+      esac
+    fi
+  elif [ "$1" != 'k' ];then
+    SPEC_VAR="${1}drv" # defined in boot parameter
+    eval ONE_SFS_SPEC="\$$SPEC_VAR"
+    if [ "$ONE_SFS_SPEC" = "" ];then
+      SPEC_VAR="DRV_${1}" # defined in DRV_SPECS file
+      eval ONE_SFS_SPEC="\$$SPEC_VAR"
+    fi
   fi
- fi
- ONE_FN="${ONE_MP}${ONE_REL_FN}"
- ONE_BASENAME="$(basename $ONE_REL_FN)"
+  if [ "$ONE_SFS_SPEC" = "" ];then
+    if [ "$ROOTFS_SPEC" ];then
+      ONE_SFS_SPEC="$ROOTFS_SPEC"
+    elif [ -e "${P_MP}${PSUBDIR}/$ONE_DEF_FN" ];then
+      ONE_SFS_SPEC=":${ONE_DEF_FN}"
+    else
+      echo "${ONE_DEF_FN}, file not found"
+      return 3
+    fi
+  fi
+  if [ "$ONE_SFS_SPEC" ];then
+    do_one_sfs_spec "$ONE_SFS_SPEC" "$1" "$2"
+    if [ $? -ne 0 ];then
+      echo "${ONE_SFS_SPEC##*/}, file not found"
+      return 3
+    fi
+    local PLACE="${SPEC_PART},${SPEC_FS},${SPEC_REL_FN}"
+    if [ "$1" = 'p' ];then
+      PUPSFS="$PLACE"
+    else
+      echo "$(echo -n "$1" | tr '[:lower:]' '[:upper:]')DRV='$PLACE'" >> "$DRVS_TMP_FN"
+    fi
+    echo "process_one_sfsOUT ${1}drv $PLACE disp=$2"
+    return 0
+  fi
+  return 9
+}
+
+setup_onepupdrv() {
+# "$1" - suffix for "pup_" branch directory - ex: a
+# "$2" - prepend after rw layer indicator - ex: p  
+#  use $SPEC_PART $SPEC_MP $SPEC_REL_FN
+ ONE_LAYER=""
+ ONE_SFX="${1}"
+ ONE_PREP="${2}"
+ ONE_FN="${SPEC_MP}${SPEC_REL_FN}"
+ ONE_BASENAME="$(basename $SPEC_REL_FN)"
  if ! [ -s "$ONE_FN" ] ; then
    return 3 #sfs not Ok - empty file
  fi
@@ -388,6 +451,9 @@
    COPY2RAM="no"
  fi
  #-
+ if [ "$SPEC_PART" = "rootfs" ];then #humongous initrd.
+  COPY2RAM='yes' #actually it is already in ram, but load_sfs_file code puts it in a tmpfs.
+ fi
  if [ "$COPY2RAM" = "" ];then
   COPY2RAM="no"
   #if there's heaps of ram, copy puppy.sfs to a tmpfs...
@@ -404,57 +470,36 @@
   SIZEZK=$(du -k $ONE_FN | cut -f 1)
   TFREEK=$(df | grep -m1 ' /mnt/tmpfs' | tr -s ' ' | cut -f 4 -d ' ')
   if [ $TFREEK -gt $SIZEZK ];then
-   if [ "$ONE_MP" = "" ];then #101101 humongous initrd.
+   echo -en " \\033[1;35m${L_COPY_MESSAGE}\\033[0;39m" > /dev/console #purple.
+   TOTAL_SIZEK_SFS_RAM=$(($TOTAL_SIZEK_SFS_RAM + $SIZEZK))
+   if [ "$SPEC_MP" = "" ];then #101101 humongous initrd.
     mv -f $ONE_FN /mnt/tmpfs/
    else
-    echo -en " \\033[1;35m${L_COPY_MESSAGE}\\033[0;39m" > /dev/console #purple.
-    TOTAL_SIZEK_SFS_RAM=$(($TOTAL_SIZEK_SFS_RAM + $SIZEZK))
     cp -af $ONE_FN /mnt/tmpfs/
    fi
    sync
    losetup -r $ONE_LOOP /mnt/tmpfs/$ONE_BASENAME
   else
    losetup -r $ONE_LOOP $ONE_FN
-   [ "$ONE_PART" != "rootfs" ] && KEEPMOUNTED="${KEEPMOUNTED}${ONE_PART} "
+   [ "$SPEC_PART" != "rootfs" ] && KEEPMOUNTED="${KEEPMOUNTED}${SPEC_PART} "
   fi
  else
   losetup -r $ONE_LOOP $ONE_FN
-  [ "$ONE_PART" != "rootfs" ] && KEEPMOUNTED="${KEEPMOUNTED}${ONE_PART} "
+  [ "$SPEC_PART" != "rootfs" ] && KEEPMOUNTED="${KEEPMOUNTED}${SPEC_PART} "
  fi
  SFS_MP="/pup_${ONE_SFX}"
  [ "$ONE_SFX" = "p" ] && SFS_MP="/pup_ro2"
  [ -d "$SFS_MP" ] || mkdir $SFS_MP
  mount -r -t squashfs -o noatime $ONE_LOOP $SFS_MP > /dev/console 2>&1
- STATUS=$? ; check_status $STATUS
- [ $STATUS -eq 0 ] && ONE_LAYER="$SFS_MP=rr"
+ STATUS=$?; check_status $STATUS
+ [ $STATUS -eq 0 ] || return 4 #sfs mount failed
  # ======= end of load_sfs_file()
- if ! [ "$ONE_LAYER" ] ; then
-   return 4 #sfs mount failed
- fi
- if [ -n "$punionfs" ]; then
-  UNIONFS="$punionfs"
- elif [ "$UNIONFS" = 'aufs' ]; then
-  grep -qm1 aufs /proc/filesystems || UNIONFS="overlay"
- fi
- if [ "$UNIONFS" = 'overlay' ]; then
-  remount_overlay -e "s~lowerdir=([^,]+)~lowerdir=${SFS_MP}:\1~" -e "s~lowerdir=,~lowerdir=${SFS_MP},~"
-  [ $? -eq 0 ] || return 5
+ if [ "$ONE_SFX" = "p" ];then
+   RO_DIR_LIST="$SFS_MP"
+ elif [ "$ONE_PREP" ];then
+   RO_DIR_LIST="${SFS_MP}:${RO_DIR_LIST}"
  else
-  mountpoint -q /pup_new
-  if [ $? -ne 0 ];then
-   echo "mount -t aufs -o udba=reval,diropq=w,br=/mnt/tmpfs/pup_rw=rw,xino=/mnt/tmpfs/.aufs.xino unionfs /pup_new" #debug
-   mount -t aufs -o udba=reval,diropq=w,br=/mnt/tmpfs/pup_rw=rw,xino=/mnt/tmpfs/.aufs.xino unionfs /pup_new
-   [ $? -eq 0 ] || fatal_error "${L_ERROR_FAILED_AUFS_STACK}"
-  fi
-  if [ "$ONE_PREP" ];then
-   echo "mount -o remount,add:1:$ONE_LAYER /pup_new" #debug
-   mount -o remount,add:1:$ONE_LAYER /pup_new
-   [ $? -eq 0 ] || return 5
-  else
-   echo "mount -o remount,append:$ONE_LAYER /pup_new" #debug
-   mount -o remount,append:$ONE_LAYER /pup_new
-   [ $? -eq 0 ] || return 5
-  fi
+   RO_DIR_LIST="${RO_DIR_LIST}:${SFS_MP}"
  fi
  NEWUNIONRECORD="${NEWUNIONRECORD}${ONE_BASENAME} "
  return 0
@@ -475,22 +520,13 @@
   /sbin/load_ext_file "$SAVE_FN" "$SAVE_MP" #reads $PFSCK
   if [ -f /tmp/savefile_loop ] ; then
     . /tmp/savefile_loop # $SAVEFILE_LOOP $SFFS
-    if [ "$UNIONFS" = 'overlay' ]; then
-      mkdir /pup_loop
-      echo "mount -t $SFFS -o noatime $SAVEFILE_LOOP /pup_loop" #debug
-      mount -t $SFFS -o noatime $SAVEFILE_LOOP /pup_loop
-      if [ $? -ne 0 ]; then
-        PUPSAVE=""
-      else
-        mkdir -p "/pup_loop/upper" "/pup_loop/work"
-        ln -sv "/pup_loop/upper" "$SAVE_LAYER"
-        ln -sv "/pup_loop/work" "$WORKDIR"
-      fi
+    [ -e /mnt/pup_loop ] || mkdir /mnt/pup_loop
+    echo "mount -t $SFFS -o noatime $SAVEFILE_LOOP /mnt/pup_loop" #debug
+    mount -t $SFFS -o noatime $SAVEFILE_LOOP /mnt/pup_loop
+    if [ $? -eq 0 ]; then
+      ln -sv '/mnt/pup_loop' "$SAVE_LAYER"
     else
-      [ -d "$SAVE_LAYER" ] || mkdir $SAVE_LAYER
-      echo "mount -t $SFFS -o noatime $SAVEFILE_LOOP $SAVE_LAYER" #debug
-      mount -t $SFFS -o noatime $SAVEFILE_LOOP $SAVE_LAYER
-      [ $? -ne 0 ] && PUPSAVE=""
+      PUPSAVE=""
     fi
   else # load_ext_file failed
     FLAG_NO_TIMEOUT=1
@@ -498,18 +534,18 @@
   fi
  elif [ -d "$SAVE_FN" ];then #savefolder
   echo "--SAVEFOLDER-- $SAVE_FN" #debug
-  if [ "$UNIONFS" = 'overlay' ]; then
-   mkdir -p "$SAVE_FN/upper" "$SAVE_FN/work"
-   ln -sv "$SAVE_FN/upper" "$SAVE_LAYER"
-   ln -sv "$SAVE_FN/work" "$WORKDIR"
-  else
-   ln -sv "$SAVE_FN" "$SAVE_LAYER"
-  fi
+  ln -sv "$SAVE_FN" "$SAVE_LAYER"
  else
   PUPSAVE=""
  fi
  #[ "$PUPSAVE" ] && decrypt directory at SAVE_LAYER
  if [ "$PUPSAVE" ];then
+  if [ "$UNIONFS" = 'overlay' ];then
+   SAVE_DIR="$(readlink "$SAVE_LAYER")/upper"
+   [ -e "$SAVE_DIR" ] || mkdir -p "$SAVE_DIR"
+   rm "$SAVE_LAYER"
+   ln -sv "$SAVE_DIR" "$SAVE_LAYER"
+  fi
   SAVE_NAME="$(basename $SAVE_REL_FN)"
   #- fix for empty pupsaves (missing /initrd/DISTRO_SPECS)
   if [ ! -f "$SAVE_LAYER/initrd/DISTRO_SPECS" ] ; then
@@ -678,7 +714,7 @@
 
 search_func() {
  [ "$PDEBUG" -a "$LOOK_SAVE" ] && echo "3: filename=${PSUBDIR}/${DISTRO_FILE_PREFIX}save"
- [ "$PDEBUG" -a "$LOOK_PUP" ] && echo "3: PSUBDIR=$PSUBDIR P_BP_FN=$P_BP_FN P_DEF_FN=$P_DEF_FN"
+ [ "$PDEBUG" -a "$LOOK_PUP" ] && echo "3: PSUBDIR=$PSUBDIR ONE_DEF_FN=$ONE_DEF_FN"
  echo "HAVE_PARTS='${HAVE_PARTS}'" #debug
  if [ "${1}" ];then
   echo "param='${1}'" #debug
@@ -705,12 +741,15 @@
     fi
    fi
    if [ "$LOOK_PUP" ];then
-    find_drv_file "$P_BP_FN" "$P_DEF_FN" ""
+    find_drv_file "$ONE_MP" "${PSUBDIR}/$ONE_DEF_FN"
     if [ "$ONE_FN" ];then
-     PDRV="$ONE_PART,$ONE_FS,$ONE_FN"
-     P_MP="$ONE_MP"
+     SPEC_PART="$ONE_PART"
+     SPEC_MP="$ONE_MP"
+     SPEC_REL_FN="$ONE_FN"
+     SPEC_FS="$ONE_FS"
+     PUPSFS="${SPEC_PART},${SPEC_FS},${SPEC_REL_FN}"
      P_PART="$ONE_PART"
-     [ "$PDEBUG" ] && echo "5: ONE_PART=$ONE_PART PSUBDIR=$PSUBDIR P_BP_FN=$P_BP_FN P_DEF_FN=$P_DEF_FN"
+     [ "$PDEBUG" ] && echo "5: PUPSFS=$PUPSFS"
      break;
     fi
    fi
@@ -785,25 +824,6 @@
  check_status -critical 1 "$1"
 }
 
-remount_overlay() {
- OPTS=`grep '^unionfs /pup_new overlay' /proc/mounts | awk '{print $4}'`
- if [ -n "$OPTS" ]; then
-  umount -l /pup_new
- else
-  mkdir /mnt/tmpfs/pup_work
-  OPTS="lowerdir=,upperdir=/mnt/tmpfs/pup_rw,workdir=/mnt/tmpfs/pup_work,xino=on"
- fi
- NEWOPTS=`echo "$OPTS" | sed -E "$@"`
- echo "mount -t overlay -o ${NEWOPTS} unionfs /pup_new" #debug
- mount -t overlay -o ${NEWOPTS} unionfs /pup_new
- STATUS=$?
- if [ $STATUS -ne 0 ]; then
-  echo "mount -t overlay -o ${OPTS} unionfs /pup_new" #debug
-  mount -t overlay -o ${OPTS} unionfs /pup_new
- fi
- return $STATUS
-}
-
 #=============================================================
 #                           MAIN
 #=============================================================
@@ -835,11 +855,6 @@
 #100915 requested by technosaurus (formats get changed further down)...
 [ $pdrv ] && PDRV=$pdrv #format partition:<path><filename> ex: sda2:/slacko/puppy_slacko_6.3.0.sfs
 [ $pupsfs ] && PDRV=$pupsfs
-[ $zdrv ] && ZDRV=$zdrv #ex: sda2:/slacko/zdrv_slacko_6.3.0.sfs
-[ $fdrv ] && FDRV=$fdrv
-[ $adrv ] && ADRV=$adrv
-[ $ydrv ] && YDRV=$ydrv
-[ $bdrv ] && BDRV=$bdrv
 #<partition>:<filename>, for savefile/savefolder. <partition> can be a name or Label or UUID
 [ $psave ] && PSAVE=$psave #ex: sdb4:/puppy/tahr/tahrsave or smark or 49baa82d-8c69:tahrsave
 #list of kernel modules to load, ex: pimod=hid-logitech-dj.ko,kernel/drivers/hid/hid-multitouch.ko 
@@ -851,6 +866,10 @@
 else
  WAITDEV=5
 fi
+[ $punionfs ] && UNIONFS=$punionfs
+if [ "$UNIONFS" = 'aufs' ]; then
+  grep -qm1 aufs /proc/filesystems || UNIONFS="overlay"
+fi
 
 #[ $pdebug ] && PDEBUG=$pdebug
 PDEBUG=1
@@ -888,68 +907,51 @@
   . /sbin/isoboot # optional, can remove all occurrences of "isoboot" from this script
 fi
 
-[ "$PDEBUG" ] && echo "0: PMEDIA=$PMEDIA PDRV=$PDRV PSUBDIR=$PSUBDIR pfix=$pfix"
-
-#100915 technosaurus recommendation (see above)...
-[ "$PDRV" ] && { decode_spec "$PDRV"; P_BP_ID="$ONE_BP_ID"; P_BP_FN="$ONE_BP_FN"; PDRV=""; }
-[ "$ZDRV" ] && { decode_spec "$ZDRV"; Z_BP_ID="$ONE_BP_ID"; Z_BP_FN="$ONE_BP_FN"; ZDRV=""; }
-[ "$FDRV" ] && { decode_spec "$FDRV"; F_BP_ID="$ONE_BP_ID"; F_BP_FN="$ONE_BP_FN"; FDRV=""; }	
-[ "$ADRV" ] && { decode_spec "$ADRV"; A_BP_ID="$ONE_BP_ID"; A_BP_FN="$ONE_BP_FN"; ADRV=""; }
-[ "$YDRV" ] && { decode_spec "$YDRV"; Y_BP_ID="$ONE_BP_ID"; Y_BP_FN="$ONE_BP_FN"; YDRV=""; }
-[ "$BDRV" ] && { decode_spec "$BDRV"; B_BP_ID="$ONE_BP_ID"; B_BP_FN="$ONE_BP_FN"; BDRV=""; }
-[ "$PSAVE" ] && { decode_spec "$PSAVE"; SAVE_BP_ID="$ONE_BP_ID"; SAVE_BP_FN="$ONE_BP_FN"; }
-SAVE_BP_DIR=""
-[ "$SAVE_BP_FN" ] && [ "${SAVE_BP_FN:$((${#SAVE_BP_FN} - 1))}" = "/" ] && SAVE_BP_DIR="$SAVE_BP_FN" #last char
-
-#first look inside initrd...
-#unset x_DEF_FN so that find_onepupdrv() won't look for it
-[ -f /${P_DEF_FN} ] && { PDRV="rootfs,rootfs,/$P_DEF_FN"; P_DEF_FN=""; }
-[ -f /${Z_DEF_FN} ] && { ZDRV="rootfs,rootfs,/$Z_DEF_FN"; Z_DEF_FN=""; }
-[ -f /${F_DEF_FN} ] && { FDRV="rootfs,rootfs,/$F_DEF_FN"; F_DEF_FN=""; }
-[ -f /${A_DEF_FN} ] && { ADRV="rootfs,rootfs,/$A_DEF_FN"; A_DEF_FN=""; }
-[ -f /${Y_DEF_FN} ] && { YDRV="rootfs,rootfs,/$Y_DEF_FN"; Y_DEF_FN=""; }
-[ -f /${B_DEF_FN} ] && { BDRV="rootfs,rootfs,/$B_DEF_FN"; B_DEF_FN=""; }
+[ "$PDEBUG" ] && echo "0: PMEDIA=$PMEDIA PDRV=$PDRV PSUBDIR=$PSUBDIR PSAVE=$PSAVE pfix=$pfix"
 
 #setup wireless
 [ "$PWIRELESS" ] && echo -e "SSID=${PWIRELESS%:*}\nPSWD=${PWIRELESS#*:}" > /tmp/wireless.conf
 
-get_part_info
-
 PUP_SAVES=""
 KEEPMOUNTED=""
 FSCKDPARTS=""
 
-[ "$PDEBUG" ] && echo "1: PDRV=$PDRV P_BP_ID=$P_BP_ID P_BP_FN=$P_BP_FN"
+#completely sortout info on the stack structure
+#create appropriate stack only at the end, either aufs or overlayfs
+RO_DIR_LIST=''	# ':' separated list of sfs MP's in stack order
+RW_DIR=''		# directory to go at top of stack, usually contains SAVE data
+RO_DIR=''		# MP of "pup_ro1" for odd pupmode, empty otherwise
+
+get_part_info
+grep -v '^sr' /tmp/ALLDRVS0 > /tmp/ATADRIVES0
+ATAOPTICALDRIVES="$(grep '^sr' /tmp/ALLDRVS0 | tr '\n' ' ')"
+
+check_resize_part
+
+RAMSIZE=$(free | grep -o 'Mem: .*' | tr -s ' ' | cut -f 2 -d ' ') #total physical ram (less shared video). 110405
+
+mount -t tmpfs tmpfs /mnt/tmpfs
+[ -d "/mnt/tmpfs/pup_rw" ] || mkdir /mnt/tmpfs/pup_rw
+
+NEWUNIONRECORD=""
+COPY2RAM=""
 
 #"pdrv" is not specified on CD, so look for CD file system
 if [ "$PMEDIA" = "cd" ];then
  wait_for_blkid 'iso9660' 'fs'
  if [ "$BLKID_PART" ];then
   if [ "$(echo $BLKID_PART | wc -w)" = "1" ];then
-   P_BP_ID="$BLKID_PART"
+   PDRV="$BLKID_PART"
   fi
  fi
 fi
 
 #establish PDRV
-P_PART=""; LOOK_PUP=""; LOOK_SAVE=""
-if [ "$P_BP_ID" ];then #specified as parameter
- decode_id "$P_BP_ID"
- [ "$ONE_PART" ] && { P_PART="$ONE_PART"; P_BP_ID=""; }
- find_onepupdrv "$P_PART" "$P_BP_FN" "$P_DEF_FN" "p" ""
- [ "$ONE_FN" ] && { PDRV="$ONE_PART,$ONE_FS,$ONE_FN"; P_MP="$ONE_MP"; }
- [ "$PDEBUG" ] && echo "2: ONE_PART=$ONE_PART ONE_FN=$ONE_FN ONE_MP=$ONE_MP"
-elif [ "$PDRV" = "" ];then #not specified anywhere
- #determine what to search for
- [ "$PMEDIA" = "cd" ] && LOOK_SAVE="yes"
- [ "$SAVE_BP_ID" -o "$PSAVEMARK" ] && LOOK_SAVE=""
- LOOK_PUP=yes
- [ "$PDEBUG" ] && echo "2: LOOK_PUP=$LOOK_PUP LOOK_SAVE=$LOOK_SAVE PMEDIA=$PMEDIA"
-fi
-
-if [ "$LOOK_PUP" -o "$LOOK_SAVE" ];then #something to search for
- [ "${PMEDIA:0:3}" != "usb" ] && search_func
- if [ "$P_PART" = "" ];then
+LOADMSG="${L_LOAD_MESSAGE}"
+process_one_sfs 'p'
+STATUS=$?
+if [ $STATUS -eq 9 ];then
+  LOOK_PUP='yes'
   wait_for_dev
   USBDRVS="$(find /sys/block -maxdepth 1 -name 'sd*' -o -name 'sr*' | xargs -n 1 readlink 2>/dev/null | grep '/usb[0-9]' | rev | cut -f 1 -d '/' | rev | tr '\n' '|')"
   [ "$PDEBUG" ] && echo "2: USBDRVS=$USBDRVS -> ${USBDRVS%|}"
@@ -958,21 +960,65 @@
   else
     search_func
   fi
- fi
+  setup_onepupdrv 'p'
+  STATUS=$?
 fi
-[ "$P_BP_ID" ] && { log_part_id "$P_BP_ID"; ONE_PART="$P_BP_ID"; }
-[ "$PDEBUG" ] && echo "6: ONE_PART=$ONE_PART ONE_TRY_FN=$ONE_TRY_FN PDRV=$PDRV"
-if [ "$PDRV" = "" ];then
- [ "$ONE_TRY_FN" ] || ONE_TRY_FN="$PSUBDIR/$P_DEF_FN"
- fatal_error "$ONE_PART $ONE_TRY_FN not found." "Finding puppy main sfs file."
+if [ $STATUS -gt 0 ];then
+ P_PRE_MSG="${L_PRE_MESSAGE}"
+ case $STATUS in
+  1) fatal_error "$(printf "${L_ERR_PDRV_INCOMPLETE}" "$PUPSFS")" "$P_PRE_MSG" ;;
+  2) fatal_error "$(printf "${L_ERR_ONEPART_NOT_MOUNTED}" "$SPEC_PART")" "$P_PRE_MSG" ;;
+  3) fatal_error "$(printf "${L_ERR_ONEPART_NOT_OK}" "$SPEC_PART" "$SPEC_REL_FN")" "$P_PRE_MSG" ;;
+  4) fatal_error "$(printf "${L_ERR_ONEPART_MOUNT_SFS_FAILED}" "$SPEC_PART" "$SPEC_REL_FN")" "$P_PRE_MSG" ;;
+  5) fatal_error "$(printf "${L_ERR_AUFS_SFS_FAILED}" "$ONE_LAYER")" "$P_PRE_MSG" ;;
+ esac
+fi
+PUP_LAYER="$SFS_MP"
+[ "$SPEC_PART" = "rootfs" ] && interpret_spec "$PDRV" 'p'
+P_PART="$SPEC_PART"
+P_MP="$SPEC_MP"
+
+# process DRV_SPECS in install directory, if present
+DRV_SPEC_FFN="${P_MP}${PSUBDIR}/DRV_SPECS"
+if [ -f "$DRV_SPEC_FFN" ]; then
+  echo "Using $DRV_SPEC_FFN"
+  # ensure only DRV variables get used
+  SPEC_TMP_FN="/tmp/${DRV_SPEC_FFN##*/}.txt"
+  tr -d '\r' < "$DRV_SPEC_FFN" | grep "^DRV_" > "$SPEC_TMP_FN"
+  . "$SPEC_TMP_FN"
+  [ "$DRV_AP" ] && APPEND_DRVS="$DRV_AP"
+  [ "$DRV_PRE" ] && PREPEND_DRVS="$DRV_PRE"
+  rm "$SPEC_TMP_FN"
 fi
 
-check_resize_part
-grep -v '^sr' /tmp/ALLDRVS0 > /tmp/ATADRIVES0
-ATAOPTICALDRIVES="$(grep '^sr' /tmp/ALLDRVS0 | tr '\n' ' ')"
+#have basic system, now try to add optional stuff
+DRVS_TMP_FN='/tmp/drvs_defs.txt'
+[ -e "$DRVS_TMP_FN" ] && rm "$DRVS_TMP_FN"
+for ONE_DRV in $APPEND_DRVS; do
+  LOADMSG="${ONE_DRV}drv"
+  process_one_sfs "$ONE_DRV"
+done
+for ONE_DRV in $PREPEND_DRVS; do
+  LOADMSG="${ONE_DRV}drv"
+  process_one_sfs "$ONE_DRV" 'p'
+done
+echo --------------------
 
 #establish SAVEPART
-decode_other_ids
+ONE_DEF_FN=''
+#process PSAVE
+[ "$PSAVE" ] || PSAVE="$ISO_PSAVE"
+if [ "$PSAVE" ];then
+  interpret_spec "$PSAVE" 'sv'
+  [ "$SPEC_PART" ] && { SAVEPART="$SPEC_PART"; PSAVEPART="$SPEC_PART"; }
+  if [ "$SPEC_REL_FN" ];then
+    SAVE_BP_FN="${SPEC_REL_FN}"
+    case "$SAVE_BP_FN" in
+      */) SAVE_BP_DIR="$SAVE_BP_FN" ;; #specified a directory
+    esac
+  fi
+fi
+#process SAVEMARK
 if [ "$P_PART" ];then
  BOOTDRV="$(echo -n "$P_PART" | grep -o -f /tmp/ALLDRVS0)" #110205 ex: sda1 becomes sda.
  if [ "$SAVEPART" = "" ];then #setup SAVEPART
@@ -981,70 +1027,13 @@
   if [ "$PSAVEMARK" -a "$BOOTDRV" ];then
    ONE_PART="${BOOTDRV}${PSAVEMARK}" #note, PSAVEMARK could also be a kernel boot param. ex: 2
    if [ "$(echo $HAVE_PARTS | grep "$ONE_PART")" ];then #partition exists
+    echo "Using SAVEMARK=$PSAVEMARK"
     SAVEPART="$ONE_PART"; PSAVEPART="$ONE_PART"; SAVE_BP_DIR="${PSUBDIR}/"
     PSAVEMARK=''
    fi
   fi
  fi
 fi
-
-#have pup...sfs, now try to load it
-RAMSIZE=$(free | grep -o 'Mem: .*' | tr -s ' ' | cut -f 2 -d ' ') #total physical ram (less shared video). 110405
-
-mount -t tmpfs tmpfs /mnt/tmpfs
-[ -d "/mnt/tmpfs/pup_rw" ] || mkdir /mnt/tmpfs/pup_rw
-
-NEWUNIONRECORD=""
-COPY2RAM=""
-
-LOADMSG="${L_LOAD_MESSAGE}"
-setup_onepupdrv "$PDRV" "p"
-STATUS=$?
-if [ $STATUS -gt 0 ];then
- P_PRE_MSG="${L_PRE_MESSAGE}"
- case $STATUS in
-  1) fatal_error "$(printf "${L_ERR_PDRV_INCOMPLETE}" "$PDRV")" "$P_PRE_MSG" ;;
-  2) fatal_error "$(printf "${L_ERR_ONEPART_NOT_MOUNTED}" "$ONE_PART")" "$P_PRE_MSG" ;;
-  3) fatal_error "$(printf "${L_ERR_ONEPART_NOT_OK}" "$ONE_PART" "$ONE_REL_FN")" "$P_PRE_MSG" ;;
-  4) fatal_error "$(printf "${L_ERR_ONEPART_MOUNT_SFS_FAILED}" "$ONE_PART" "$ONE_REL_FN")" "$P_PRE_MSG" ;;
-  5) fatal_error "$(printf "${L_ERR_AUFS_SFS_FAILED}" "$ONE_LAYER")" "$P_PRE_MSG" ;;
- esac
-fi
-PUP_LAYER="$SFS_MP"
-
-#all partition id's should be decoded by now
-[ "$Z_BP_ID" ] && log_part_id "$Z_BP_ID"
-[ "$F_BP_ID" ] && log_part_id "$F_BP_ID"
-[ "$A_BP_ID" ] && log_part_id "$A_BP_ID"
-[ "$Y_BP_ID" ] && log_part_id "$Y_BP_ID"
-[ "$B_BP_ID" ] && log_part_id "$B_BP_ID"
-[ "$SAVE_BP_ID" ] && log_part_id "$SAVE_BP_ID"
-
-#have basic system, now try to add optional stuff
-find_onepupdrv "$F_PART" "$F_BP_FN" "$F_DEF_FN" "f" ""
-[ "$ONE_FN" ] && FDRV="$ONE_PART,$ONE_FS,$ONE_FN"
-[ "$FDRV" ] && { LOADMSG="fdrv"; setup_onepupdrv "$FDRV" "f"; }
-
-find_onepupdrv "$Z_PART" "$Z_BP_FN" "$Z_DEF_FN" "z" ""
-[ "$ONE_FN" ] && ZDRV="$ONE_PART,$ONE_FS,$ONE_FN"
-[ "$ZDRV" ] && { LOADMSG="zdrv"; setup_onepupdrv "$ZDRV" "z"; }
-
-find_onepupdrv "$Y_PART" "$Y_BP_FN" "$Y_DEF_FN" "y" ""
-[ "$ONE_FN" ] && YDRV="$ONE_PART,$ONE_FS,$ONE_FN"
-[ "$YDRV" ] && { LOADMSG="ydrv"; setup_onepupdrv "$YDRV" "y" "p"; }
-
-find_onepupdrv "$B_PART" "$B_BP_FN" "$B_DEF_FN" "b" ""
-[ "$ONE_FN" ] && BDRV="$ONE_PART,$ONE_FS,$ONE_FN"
-[ "$BDRV" ] && { LOADMSG="bdrv"; setup_onepupdrv "$BDRV" "b" "p"; }
-
-find_onepupdrv "$A_PART" "$A_BP_FN" "$A_DEF_FN" "a" ""
-[ "$ONE_FN" ] && ADRV="$ONE_PART,$ONE_FS,$ONE_FN"
-[ "$ADRV" ] && { LOADMSG="adrv"; setup_onepupdrv "$ADRV" "a" "p"; }
-
-find_onepupdrv "" "" "$KBUILD_DEF_FN" "k" ""
-[ "$ONE_FN" ] && KBUILD="$ONE_PART,$ONE_FS,$ONE_FN"
-[ "$KBUILD" ] && { LOADMSG="kbuild"; setup_onepupdrv "$KBUILD" "k" "p"; }
-
 #process SAVESPEC - takes precedence - written by shutdownconfig
 if [ -f "${P_MP}${PSUBDIR}/SAVESPEC" ];then
  echo "Using ${P_MP}${PSUBDIR}/SAVESPEC"
@@ -1077,7 +1066,6 @@
 [ "$SAVEPART" ] || SAVEPART="$P_PART"
 
 #ensure that save partition is mounted
-#if SAVEPART is not the same as P_PART
 #moved up here to ensure config files are available
 [ "$SAVEPART" ] && ensure_save_mounted
 
@@ -1096,18 +1084,31 @@
 fi
 #modprobe modules needed by keyboard
 if [ "$PIMOD" != "" ]; then
- [ -L "/lib/modules/$KERNELVER" ] || ln -sv /pup_new/lib/modules/$KERNELVER /lib/modules/$KERNELVER
- [ -L "/lib/firmware" ] || ln -sv /pup_new/lib/firmware /lib/firmware
- for ONEMOD in `echo -n "$PIMOD" | tr ',' ' '`;do
-  echo -n "$(printf "${L_ADDING_MODULE}" "$ONEMOD")" > /dev/console
-  modprobe "$ONEMOD" > /dev/console 2>&1
-  check_status $?
- done
+  # build sfs stack
+  [ -d /pup_sfs ] || mkdir /pup_sfs
+  case $RO_DIR_LIST in
+    *:*) echo "mount -t overlay -o ro,noatime,lowerdir=${RO_DIR_LIST} overlay /pup_sfs"
+      mount -t overlay -o ro,noatime,lowerdir=${RO_DIR_LIST} overlay /pup_sfs >/dev/console 2>&1
+      STATUS=$?
+    ;;
+    *) ln -sv $RO_DIR_LIST /pup_sfs
+      STATUS=$?
+    ;;
+  esac
+  if [ $STATUS -eq 0 ];then
+    [ -d "/lib/modules" ] || mkdir -p "/lib/modules"
+    [ -L "/lib/modules/$KERNELVER" ] || ln -sv /pup_sfs/lib/modules/$KERNELVER /lib/modules/$KERNELVER
+    [ -L "/lib/firmware" ] || ln -sv /pup_sfs/lib/firmware /lib/firmware
+    for ONEMOD in `echo -n "$PIMOD" | tr ',' ' '`;do
+      echo -n "$(printf "${L_ADDING_MODULE}" "$ONEMOD")" > /dev/console
+      modprobe "$ONEMOD" > /dev/console 2>&1
+      check_status $?
+    done
+  fi
+  umount /pup_sfs
+  rm -rf /pup_sfs
 fi
 
-#find PUPSAVE, sortout pupmode
-PUPMODE=5
-
 #debug
 echo --------------------
 echo "SAVE_MP=${SAVE_MP}"
@@ -1116,7 +1117,12 @@
 mount
 echo --------------------
 
-PUPSAVE=""
+#find PUPSAVE, sortout pupmode
+PUPSAVE=''
+PUPMODE=5
+RW_DIR='/mnt/tmpfs/pup_rw'
+[ -e /pup_rw ] && rm -rf /pup_rw
+
 if [ "${SAVE_MP}" != "" -a "$PRAMONLY" != "yes" ];then #have mounted save? partition
  #check if save partition is linux
  set_fs_linux "$SAVE_FS"
@@ -1212,7 +1218,6 @@
 fi
 
 SAVE_LAYER=""
-WORKDIR="/pup_work"
 if [ "$PUPSAVE" ];then #refine pupmode
  # refine pupmode
  if [ $PUPMODE -eq 12 ];then
@@ -1237,45 +1242,23 @@
   [ $PUPMODE -eq 77 ] && copy_folders #to /pup_ro1 (part of the tmpfs)
   [ $PUPMODE -eq 13 ] && setup_psave
   if [ "$PUPSAVE" ] ; then
-    #prepend ro1 - #SAVE_LAYER=/pup_ro1
+    #SAVE_LAYER=/pup_ro1
+    RO_DIR="$SAVE_LAYER"
     rm -rf ${SAVE_LAYER}/tmp #in case last boot was pupmode=12
-    #adjust stack
-    if [ "$UNIONFS" = 'overlay' ]; then
-     #pup_rw is bigger because files are copied, not moved to pup_ro1
-     mount -o remount,size=75% /mnt/tmpfs
-     remount_overlay "s~lowerdir=([^,]+)~lowerdir=${SAVE_LAYER}:\1~"
-    else
-     echo "mount -o remount,add:1:${SAVE_LAYER}=ro+wh /pup_new" #debug
-     mount -o remount,add:1:${SAVE_LAYER}=ro+wh /pup_new #ro+wh = Readonly branch and it has/might have whiteouts on it
-    fi
-    if [ $? -eq 0 ];then
-      [ $PUPMODE -ne 77 ] && KEEPMOUNTED="${KEEPMOUNTED}${SAVEPART} "
-      [ "$SAVE_NAME" ] && NEWUNIONRECORD="$SAVE_NAME $NEWUNIONRECORD"
-    else
-      printf "${L_ADDING_SAVE_LAYER_FAILED}\n" "$SAVE_LAYER"
-    fi
+    [ $PUPMODE -ne 77 ] && KEEPMOUNTED="${KEEPMOUNTED}${SAVEPART} "
+    [ "$SAVE_NAME" ] && NEWUNIONRECORD="$SAVE_NAME $NEWUNIONRECORD"
   fi
  ;;
  12) #replace rw
   setup_psave
   if [ "$PUPSAVE" ] ; then
     #SAVE_LAYER=/pup_rw
+    RW_DIR="$(readlink $SAVE_LAYER)"
     #setup empty /tmp on tmpfs for in stack
     rm -rf ${SAVE_LAYER}/tmp
-    #adjust stack
-    if [ "$UNIONFS" = 'overlay' ]; then
-     remount_overlay -e "s~upperdir=[^,]+~upperdir=${SAVE_LAYER}~" -e "s~workdir=[^,]+~workdir=${WORKDIR}~"
-    else
-     echo "mount -o remount,prepend:${SAVE_LAYER}=rw,mod:/mnt/tmpfs/pup_rw=ro,del:/mnt/tmpfs/pup_rw /pup_new" #debug
-     mount -o remount,prepend:${SAVE_LAYER}=rw,mod:/mnt/tmpfs/pup_rw=ro,del:/mnt/tmpfs/pup_rw /pup_new
-    fi
-    if [ $? -eq 0 ];then
-      rm -rf /mnt/tmpfs/pup_rw
-      KEEPMOUNTED="${KEEPMOUNTED}${SAVEPART} "
-      [ "$SAVE_NAME" ] && NEWUNIONRECORD="$SAVE_NAME $NEWUNIONRECORD"
-    else
-      printf "${L_ADDING_SAVE_LAYER_FAILED}\n" "$SAVE_LAYER"
-    fi
+    rm -rf /mnt/tmpfs/pup_rw
+    KEEPMOUNTED="${KEEPMOUNTED}${SAVEPART} "
+    [ "$SAVE_NAME" ] && NEWUNIONRECORD="$SAVE_NAME $NEWUNIONRECORD"
   fi
  ;;
  66) #extract to stack at new tmpfs
@@ -1283,33 +1266,15 @@
   if [ -s "$ARCHIVE_FN" ];then
     echo -n "$(printf "${L_LOADING_SAVE_ARCHIVE}" "${PUPSAVE#*,*,}" "$SAVEPART")" > /dev/console
     echo "--SAVEARCHIVE-- $ARCHIVE_FN" #debug
-    PM66_DIR='/pup_rw'
-    rm -r -f "$PM66_DIR"
-    [ -d "$PM66_DIR" ] || mkdir $PM66_DIR
-    mount -t tmpfs tmpfs $PM66_DIR
-    if [ "$UNIONFS" = 'overlay' ]; then
-      mkdir $PM66_DIR/upper $PM66_DIR/work
-      tar xf "$ARCHIVE_FN" -m -C $PM66_DIR/upper 2>/dev/null
-      STATUS=$?
-      if [ $STATUS -eq 0 ];then
-        remount_overlay -e "s~upperdir=[^,]+~upperdir=${PM66_DIR}/upper~" -e "s~workdir=[^,]+~workdir=${PM66_DIR}/work~"
-        STATUS=$?
-      fi
-    else
-      tar xf "$ARCHIVE_FN" -m -C $PM66_DIR 2>/dev/null
-      STATUS=$?
-      if [ $STATUS -eq 0 ];then
-        #replace rw branch with new populated tmpfs
-        echo "mount -o remount,prepend:${PM66_DIR}=rw,mod:/mnt/tmpfs/pup_rw=ro,del:/mnt/tmpfs/pup_rw /pup_new" #debug
-        mount -o remount,prepend:${PM66_DIR}=rw,mod:/mnt/tmpfs/pup_rw=ro,del:/mnt/tmpfs/pup_rw /pup_new
-        STATUS=$?
-      fi
-    fi
+    PM66_DIR="$RW_DIR"
+    [ -d "$PM66_DIR" ] || mkdir -p "$PM66_DIR"
+    tar xf "$ARCHIVE_FN" -m -C "$PM66_DIR" 2>/dev/null
+    STATUS=$?
     if [ $STATUS -eq 0 ];then
       SAVE_MP=''
-      rm -rf /mnt/tmpfs/pup_rw
+      ln -sv "$PM66_DIR" /pup_rw
     else
-      printf "${L_ADDING_SAVE_LAYER_FAILED}\n" "$PM66_DIR"
+      printf "${L_TAR_ARCHIVE_FAILED}\n" "$ARCHIVE_FN"
     fi
     check_status $STATUS
   fi
@@ -1319,21 +1284,63 @@
  ;;
 esac
 
-if [ "$SAVEPART" -a "$UNIONFS" = 'overlay' -a -f /pup_new/etc/rc.d/BOOTCONFIG ]; then
- EXTRASFSLIST=""
- . /pup_new/etc/rc.d/BOOTCONFIG
- for ONE_SFS in $EXTRASFSLIST; do
-  LOOP=`losetup -f`
-  find_onepupdrv "$SAVEPART" "" "$ONE_SFS" "p" "1"
-  [ "$ONE_FN" ] && { LOADMSG="extra"; setup_onepupdrv "$ONE_PART,$ONE_FS,$ONE_FN" "ro${LOOP#/dev/loop}" "p"; }
- done
+#create appropriate stack
+echo ""
+if [ "$UNIONFS" = 'overlay' ];then
+  if [ "$RW_DIR" = '/mnt/tmpfs/pup_rw' ];then
+    WK_DIR='/mnt/tmpfs/pup_work'
+    [ -e /pup_rw ] || ln -sv '/mnt/tmpfs/pup_rw' /pup_rw
+  else
+    WK_DIR="${RW_DIR%/upper}/work"
+  fi
+  [ -d "$WK_DIR" ] || mkdir "$WK_DIR"
+  rm -rf /pup_work
+  ln -sv "$WK_DIR" /pup_work
+  [ "$RO_DIR" ] && RO_DIR_LIST="${RO_DIR}:${RO_DIR_LIST}"
+#append extra sfs files
+  if [ "$PUPSAVE" -a -s $SAVE_LAYER/etc/rc.d/BOOTCONFIG ];then
+    SAVE_SPEC="${PUPSAVE%/*}"
+    SFS_SPEC="${PUPSFS%/*}"
+    X_PART="${SAVE_SPEC%%,*}"
+    X_DIR="${SAVE_SPEC##*,}"
+    LOADMSG="extra"
+    EXTRASFSLIST=''
+    . $SAVE_LAYER/etc/rc.d/BOOTCONFIG
+    for X_SFS in $EXTRASFSLIST;do
+      NUM=$(losetup -f); NUM=${NUM#/dev/loop}
+      if [ "$SAVE_SPEC" = "$SFS_SPEC" ];then
+        X_LIST="${X_PART}:${X_DIR}/${X_SFS} ${X_PART}:/${X_SFS}"
+      else
+        X_LIST="${X_PART}:${X_DIR}/${X_SFS} ${X_PART}:/${X_SFS} :${X_SFS}"
+      fi
+      for X_SPEC in $X_LIST;do
+        do_one_sfs_spec "$X_SPEC" "ro${NUM}"
+        STATUS=$?
+        [ $STATUS -eq 0 ] && break
+      done
+      if [ $STATUS -eq 0 ];then
+        echo "Using ${SPEC_MP}${SPEC_REL_FN} as an extra sfs file, pup_ro${NUM}."
+      else
+        echo "${X_SFS}, file not found"
+      fi
+    done
+  fi
+  echo "mount -t overlay -o lowerdir=${RO_DIR_LIST},upperdir=/pup_rw,workdir=/pup_work,xino=on unionfs /pup_new"
+  mount -t overlay -o lowerdir=${RO_DIR_LIST},upperdir=/pup_rw,workdir=/pup_work,xino=on unionfs /pup_new
+else
+  RO_DIR_LIST="${RO_DIR_LIST//:/=rr:}=rr"
+  [ "$RO_DIR" ] && RO_DIR_LIST="${RO_DIR}=ro+wh:${RO_DIR_LIST}"
+  echo "mount -t aufs -o udba=reval,diropq=w,br=/pup_rw=rw:${RO_DIR_LIST},xino=/mnt/tmpfs/.aufs.xino unionfs /pup_new"
+  mount -t aufs -o udba=reval,diropq=w,br=/pup_rw=rw:${RO_DIR_LIST},xino=/mnt/tmpfs/.aufs.xino unionfs /pup_new
 fi
+[ $? -eq 0 ] || fatal_error "$(printf "${L_ERROR_FAILED_STACK}" $UNIONFS)"
+echo ""
 
 umount_unneeded
 
 echo -n $(($TOTAL_SIZEK_SFS_RAM - 5)) > /tmp/sfs_ram_sizek
 
-[ "$DEV1FS" ] || DEV1FS="$(echo "$PDRV" | cut -f 2 -d ',')"
+[ "$DEV1FS" ] || DEV1FS="$(echo "$PUPSFS" | cut -f 2 -d ',')"
 [ "$ATADRIVES" ] || ATADRIVES="$(cat /tmp/ATADRIVES0 | tr '\n' ' ')"
 
 mkdir -p /pup_new/etc/rc.d
@@ -1341,7 +1348,7 @@
 echo "PUPMODE=$PUPMODE"
 echo "PDEV1='$P_PART'"
 echo "DEV1FS='$DEV1FS'"
-echo "PUPSFS='$PDRV'"
+echo "PUPSFS='$PUPSFS'"
 echo "PUPSAVE='$PUPSAVE'"
 echo "PMEDIA='$PMEDIA'"
 echo '#ATADRIVES is all internal ide/pata/sata drives, excluding optical, excluding usb...'
@@ -1355,12 +1362,6 @@
 echo "#The partition that has the ${DISTRO_FILE_PREFIX}save file is mounted here..."
 echo "PUP_HOME='${SAVE_MP}'"
 echo '#(in /initrd) ...note, /mnt/home is a link to it.'
-echo '#this file has extra kernel drivers and firmware...'
-echo "ZDRV='$ZDRV'"
-echo "FDRV='$FDRV'"
-echo "ADRV='$ADRV'"
-echo "YDRV='$YDRV'"
-echo "BDRV='$BDRV'"
 echo '#Partition no. override on boot drive to which session is (or will be) saved...'
 echo "PSAVEMARK='$PSAVEMARK'"
 echo "PSAVEPART='$PSAVEPART'"
@@ -1371,6 +1372,8 @@
 echo "DOMIBS='no'"
 [ -f /sbin/set_plang ] && plang_pupstate #echo
 ) > /pup_new/etc/rc.d/PUPSTATE
+cat "$DRVS_TMP_FN" >> /pup_new/etc/rc.d/PUPSTATE
+rm "$DRVS_TMP_FN"
 
 if [ "$PUPSAVE" ];then
  xBOOTCONFIG="$(grep -v '^PREVUNIONRECORD' /pup_new/etc/rc.d/BOOTCONFIG | sed -e 's/^LASTUNIONRECORD/PREVUNIONRECORD/')"
@@ -1385,17 +1388,15 @@
 
 echo "Moving mountpoints to /pup_new/initrd for after switch..." #debug
 rm -r -f "/pup_new/initrd${SAVE_LAYER}"
-OPT="move"
-[ "$UNIONFS" = 'overlay' ] && OPT="bind"
 for ONEMNT in $(mount | cut -f 3 -d ' ' | grep -v 'pup_new' | grep '^/pup_' | tr '\n' ' ');do
  mkdir -p /pup_new/initrd${ONEMNT}
- echo "mount -o $OPT $ONEMNT /pup_new/initrd${ONEMNT}" #debug
- mount -o $OPT $ONEMNT /pup_new/initrd${ONEMNT}
+ echo "mount -o move $ONEMNT /pup_new/initrd${ONEMNT}" #debug
+ mount -o move $ONEMNT /pup_new/initrd${ONEMNT}
 done
 for ONEMNT in $(mount | cut -f 3 -d ' ' | grep '^/mnt/' | tr '\n' ' ');do
  mkdir -p /pup_new/initrd${ONEMNT}
- echo "mount -o $OPT $ONEMNT /pup_new/initrd${ONEMNT}" #debug
- mount -o $OPT $ONEMNT /pup_new/initrd${ONEMNT}
+ echo "mount -o move $ONEMNT /pup_new/initrd${ONEMNT}" #debug
+ mount -o move $ONEMNT /pup_new/initrd${ONEMNT}
 done
 
 echo -------------------- # debug

--- init	2022-09-25 12:57:54.149022350 +1000
+++ init+overlay	2022-09-25 12:59:31.057028890 +1000
@@ -28,8 +28,8 @@
 L_UPGRADE_NO="Backing off, not using personal storage, booting in RAM only, PUPMODE=5..."
 L_LOADING_FROM_CD="Loading folder %s from CD/DVD..." #printf
 L_RAM_DISK_FULL="RAM disk full, copy failed at %s" #printf
-L_ADDING_SAVE_LAYER_FAILED="adding %s to aufs stack failed." #printf
 L_WAITING_FOR_DEV='Waiting %s seconds for slow storage devices.' #printf
+L_TAR_ARCHIVE_FAILED="Extracting tar archive %s failed." #printf
 L_WAITING_FOR_PART='Waiting for partition [%s]' #printf
 L_LOADING_KEYBOARD_LAYOUT="Loading '%s' keyboard layout..." #printf
 L_COPY_MESSAGE="copying to ram"
@@ -45,7 +45,7 @@
 L_SWITCH_ROOT="Performing a 'switch_root' to the %s filesystem..." #printf
 L_FOLDER_MARKED_BAD="Folder %s marked bad." #printf
 L_0_NONE="0  none"
-L_ERROR_FAILED_AUFS_STACK='Failed to create empty aufs stack'
+L_ERROR_FAILED_STACK="Failed to create %s stack." #printf
 L_ADDING_MODULE="Adding module %s" #printf
 L_NO_DISTRO_SPECS="No DISTRO_SPECS file found, assuming that personal storage is empty."
 L_DEBUG_SAVE="To save debug info to a partition, type 'debugsave'"
@@ -90,7 +90,7 @@
 #Filesystem to be fsck
 FSCKLIST="ext2|ext3|ext4|vfat|msdos|exfat"
 
-# Layered file system to use
+# Default layered file system
 UNIONFS='aufs'
 
 # ?drv_...sfs files to load below puppy_...sfs
@@ -182,9 +182,13 @@
   sleep 1
   echo -en "\\033[1;33m.\\033[0;39m" >/dev/console #yellow dot
  done
- [ "$PART" ] && BLKID_PART="$PART"
+ if [ "$PART" ];then
+  BLKID_PART="$PART"
+ else
+  echo "Partition ${1} not found."
+ fi
+ get_part_info
  if [ "$DIDMSG" ];then
-  get_part_info
   if [ "$PART" ];then
    check_status 0
   else
@@ -254,10 +258,10 @@
   if [ "$ONE_MP" != "$SAVE_MP" ];then
    #ensure SAVEPART is mounted on /mnt/dev_save
    [ -d "$SAVE_MP" ] || mkdir -p $SAVE_MP
-   OPT="move"
-   [ "$UNIONFS" = 'overlay' ] && OPT="bind"
-   echo "mount -o $OPT $ONE_MP $SAVE_MP" #debug
-   mount -o $OPT $ONE_MP $SAVE_MP
+   echo "mount -o move $ONE_MP $SAVE_MP" #debug
+   mount -o move $ONE_MP $SAVE_MP
+   #re-establish P_MP if PDRV was the moved partition MP
+   [ "$SAVEPART" = "$P_PART" ] && P_MP="$SAVE_MP"
   fi
   SAVE_FS="$ONE_FS"
  else
@@ -443,6 +447,9 @@
    COPY2RAM="no"
  fi
  #-
+ if [ "$SPEC_PART" = "rootfs" ];then #humongous initrd.
+  COPY2RAM='yes' #actually it is already in ram, but load_sfs_file code puts it in a tmpfs.
+ fi
  if [ "$COPY2RAM" = "" ];then
   COPY2RAM="no"
   #if there's heaps of ram, copy puppy.sfs to a tmpfs...
@@ -459,57 +466,36 @@
   SIZEZK=$(du -k $ONE_FN | cut -f 1)
   TFREEK=$(df | grep -m1 ' /mnt/tmpfs' | tr -s ' ' | cut -f 4 -d ' ')
   if [ $TFREEK -gt $SIZEZK ];then
-   if [ "$ONE_MP" = "" ];then #101101 humongous initrd.
+   echo -en " \\033[1;35m${L_COPY_MESSAGE}\\033[0;39m" > /dev/console #purple.
+   TOTAL_SIZEK_SFS_RAM=$(($TOTAL_SIZEK_SFS_RAM + $SIZEZK))
+   if [ "$SPEC_MP" = "" ];then #101101 humongous initrd.
     mv -f $ONE_FN /mnt/tmpfs/
    else
-    echo -en " \\033[1;35m${L_COPY_MESSAGE}\\033[0;39m" > /dev/console #purple.
-    TOTAL_SIZEK_SFS_RAM=$(($TOTAL_SIZEK_SFS_RAM + $SIZEZK))
     cp -af $ONE_FN /mnt/tmpfs/
    fi
    sync
    losetup -r $ONE_LOOP /mnt/tmpfs/$ONE_BASENAME
   else
    losetup -r $ONE_LOOP $ONE_FN
-   [ "$ONE_PART" != "rootfs" ] && KEEPMOUNTED="${KEEPMOUNTED}${ONE_PART} "
+   [ "$SPEC_PART" != "rootfs" ] && KEEPMOUNTED="${KEEPMOUNTED}${SPEC_PART} "
   fi
  else
   losetup -r $ONE_LOOP $ONE_FN
-  [ "$ONE_PART" != "rootfs" ] && KEEPMOUNTED="${KEEPMOUNTED}${ONE_PART} "
+  [ "$SPEC_PART" != "rootfs" ] && KEEPMOUNTED="${KEEPMOUNTED}${SPEC_PART} "
  fi
  SFS_MP="/pup_${ONE_SFX}"
  [ "$ONE_SFX" = "p" ] && SFS_MP="/pup_ro2"
  [ -d "$SFS_MP" ] || mkdir $SFS_MP
  mount -r -t squashfs -o noatime $ONE_LOOP $SFS_MP > /dev/console 2>&1
- STATUS=$? ; check_status $STATUS
- [ $STATUS -eq 0 ] && ONE_LAYER="$SFS_MP=rr"
+ STATUS=$?; check_status $STATUS
+ [ $STATUS -eq 0 ] || return 4 #sfs mount failed
  # ======= end of load_sfs_file()
- if ! [ "$ONE_LAYER" ] ; then
-   return 4 #sfs mount failed
- fi
- if [ -n "$punionfs" ]; then
-  UNIONFS="$punionfs"
- elif [ "$UNIONFS" = 'aufs' ]; then
-  grep -qm1 aufs /proc/filesystems || UNIONFS="overlay"
- fi
- if [ "$UNIONFS" = 'overlay' ]; then
-  remount_overlay -e "s~lowerdir=([^,]+)~lowerdir=${SFS_MP}:\1~" -e "s~lowerdir=,~lowerdir=${SFS_MP},~"
-  [ $? -eq 0 ] || return 5
+ if [ "$ONE_SFX" = "p" ];then
+   RO_DIR_LIST="$SFS_MP"
+ elif [ "$ONE_PREP" ];then
+   RO_DIR_LIST="${SFS_MP}:${RO_DIR_LIST}"
  else
-  mountpoint -q /pup_new
-  if [ $? -ne 0 ];then
-   echo "mount -t aufs -o udba=reval,diropq=w,br=/mnt/tmpfs/pup_rw=rw,xino=/mnt/tmpfs/.aufs.xino unionfs /pup_new" #debug
-   mount -t aufs -o udba=reval,diropq=w,br=/mnt/tmpfs/pup_rw=rw,xino=/mnt/tmpfs/.aufs.xino unionfs /pup_new
-   [ $? -eq 0 ] || fatal_error "${L_ERROR_FAILED_AUFS_STACK}"
-  fi
-  if [ "$ONE_PREP" ];then
-   echo "mount -o remount,add:1:$ONE_LAYER /pup_new" #debug
-   mount -o remount,add:1:$ONE_LAYER /pup_new
-   [ $? -eq 0 ] || return 5
-  else
-   echo "mount -o remount,append:$ONE_LAYER /pup_new" #debug
-   mount -o remount,append:$ONE_LAYER /pup_new
-   [ $? -eq 0 ] || return 5
-  fi
+   RO_DIR_LIST="${RO_DIR_LIST}:${SFS_MP}"
  fi
  NEWUNIONRECORD="${NEWUNIONRECORD}${ONE_BASENAME} "
  return 0
@@ -530,22 +516,13 @@
   /sbin/load_ext_file "$SAVE_FN" "$SAVE_MP" #reads $PFSCK
   if [ -f /tmp/savefile_loop ] ; then
     . /tmp/savefile_loop # $SAVEFILE_LOOP $SFFS
-    if [ "$UNIONFS" = 'overlay' ]; then
-      mkdir /pup_loop
-      echo "mount -t $SFFS -o noatime $SAVEFILE_LOOP /pup_loop" #debug
-      mount -t $SFFS -o noatime $SAVEFILE_LOOP /pup_loop
-      if [ $? -ne 0 ]; then
-        PUPSAVE=""
-      else
-        mkdir -p "/pup_loop/upper" "/pup_loop/work"
-        ln -sv "/pup_loop/upper" "$SAVE_LAYER"
-        ln -sv "/pup_loop/work" "$WORKDIR"
-      fi
+    [ -e /mnt/pup_loop ] || mkdir /mnt/pup_loop
+    echo "mount -t $SFFS -o noatime $SAVEFILE_LOOP /mnt/pup_loop" #debug
+    mount -t $SFFS -o noatime $SAVEFILE_LOOP /mnt/pup_loop
+    if [ $? -eq 0 ]; then
+      ln -sv '/mnt/pup_loop' "$SAVE_LAYER"
     else
-      [ -d "$SAVE_LAYER" ] || mkdir $SAVE_LAYER
-      echo "mount -t $SFFS -o noatime $SAVEFILE_LOOP $SAVE_LAYER" #debug
-      mount -t $SFFS -o noatime $SAVEFILE_LOOP $SAVE_LAYER
-      [ $? -ne 0 ] && PUPSAVE=""
+      PUPSAVE=""
     fi
   else # load_ext_file failed
     FLAG_NO_TIMEOUT=1
@@ -553,18 +530,18 @@
   fi
  elif [ -d "$SAVE_FN" ];then #savefolder
   echo "--SAVEFOLDER-- $SAVE_FN" #debug
-  if [ "$UNIONFS" = 'overlay' ]; then
-   mkdir -p "$SAVE_FN/upper" "$SAVE_FN/work"
-   ln -sv "$SAVE_FN/upper" "$SAVE_LAYER"
-   ln -sv "$SAVE_FN/work" "$WORKDIR"
-  else
-   ln -sv "$SAVE_FN" "$SAVE_LAYER"
-  fi
+  ln -sv "$SAVE_FN" "$SAVE_LAYER"
  else
   PUPSAVE=""
  fi
  #[ "$PUPSAVE" ] && decrypt directory at SAVE_LAYER
  if [ "$PUPSAVE" ];then
+  if [ "$UNIONFS" = 'overlay' ];then
+   SAVE_DIR="$(readlink "$SAVE_LAYER")/upper"
+   [ -e "$SAVE_DIR" ] || mkdir -p "$SAVE_DIR"
+   rm "$SAVE_LAYER"
+   ln -sv "$SAVE_DIR" "$SAVE_LAYER"
+  fi
   SAVE_NAME="$(basename $SAVE_REL_FN)"
   #- fix for empty pupsaves (missing /initrd/DISTRO_SPECS)
   if [ ! -f "$SAVE_LAYER/initrd/DISTRO_SPECS" ] ; then
@@ -733,7 +710,7 @@
 
 search_func() {
  [ "$PDEBUG" -a "$LOOK_SAVE" ] && echo "3: filename=${PSUBDIR}/${DISTRO_FILE_PREFIX}save"
- [ "$PDEBUG" -a "$LOOK_PUP" ] && echo "3: PSUBDIR=$PSUBDIR P_BP_FN=$P_BP_FN P_DEF_FN=$P_DEF_FN"
+ [ "$PDEBUG" -a "$LOOK_PUP" ] && echo "3: PSUBDIR=$PSUBDIR ONE_DEF_FN=$ONE_DEF_FN"
  echo "HAVE_PARTS='${HAVE_PARTS}'" #debug
  if [ "${1}" ];then
   echo "param='${1}'" #debug
@@ -760,12 +737,15 @@
     fi
    fi
    if [ "$LOOK_PUP" ];then
-    find_drv_file "$P_BP_FN" "$P_DEF_FN" ""
+    find_drv_file "$ONE_MP" "${PSUBDIR}/$ONE_DEF_FN"
     if [ "$ONE_FN" ];then
-     PDRV="$ONE_PART,$ONE_FS,$ONE_FN"
-     P_MP="$ONE_MP"
+     SPEC_PART="$ONE_PART"
+     SPEC_MP="$ONE_MP"
+     SPEC_REL_FN="$ONE_FN"
+     SPEC_FS="$ONE_FS"
+     PUPSFS="${SPEC_PART},${SPEC_FS},${SPEC_REL_FN}"
      P_PART="$ONE_PART"
-     [ "$PDEBUG" ] && echo "5: ONE_PART=$ONE_PART PSUBDIR=$PSUBDIR P_BP_FN=$P_BP_FN P_DEF_FN=$P_DEF_FN"
+     [ "$PDEBUG" ] && echo "5: PUPSFS=$PUPSFS"
      break;
     fi
    fi
@@ -882,6 +862,10 @@
 else
  WAITDEV=5
 fi
+[ $punionfs ] && UNIONFS=$punionfs
+if [ "$UNIONFS" = 'aufs' ]; then
+  grep -qm1 aufs /proc/filesystems || UNIONFS="overlay"
+fi
 
 #[ $pdebug ] && PDEBUG=$pdebug
 PDEBUG=1
@@ -1026,6 +1010,7 @@
   if [ "$PSAVEMARK" -a "$BOOTDRV" ];then
    ONE_PART="${BOOTDRV}${PSAVEMARK}" #note, PSAVEMARK could also be a kernel boot param. ex: 2
    if [ "$(echo $HAVE_PARTS | grep "$ONE_PART")" ];then #partition exists
+    echo "Using SAVEMARK=$PSAVEMARK"
     SAVEPART="$ONE_PART"; PSAVEPART="$ONE_PART"; SAVE_BP_DIR="${PSUBDIR}/"
     PSAVEMARK=''
    fi
@@ -1064,7 +1049,6 @@
 [ "$SAVEPART" ] || SAVEPART="$P_PART"
 
 #ensure that save partition is mounted
-#if SAVEPART is not the same as P_PART
 #moved up here to ensure config files are available
 [ "$SAVEPART" ] && ensure_save_mounted
 
@@ -1216,7 +1200,6 @@
 fi
 
 SAVE_LAYER=""
-WORKDIR="/pup_work"
 if [ "$PUPSAVE" ];then #refine pupmode
  # refine pupmode
  if [ $PUPMODE -eq 12 ];then
@@ -1241,45 +1224,23 @@
   [ $PUPMODE -eq 77 ] && copy_folders #to /pup_ro1 (part of the tmpfs)
   [ $PUPMODE -eq 13 ] && setup_psave
   if [ "$PUPSAVE" ] ; then
-    #prepend ro1 - #SAVE_LAYER=/pup_ro1
+    #SAVE_LAYER=/pup_ro1
+    RO_DIR="$SAVE_LAYER"
     rm -rf ${SAVE_LAYER}/tmp #in case last boot was pupmode=12
-    #adjust stack
-    if [ "$UNIONFS" = 'overlay' ]; then
-     #pup_rw is bigger because files are copied, not moved to pup_ro1
-     mount -o remount,size=75% /mnt/tmpfs
-     remount_overlay "s~lowerdir=([^,]+)~lowerdir=${SAVE_LAYER}:\1~"
-    else
-     echo "mount -o remount,add:1:${SAVE_LAYER}=ro+wh /pup_new" #debug
-     mount -o remount,add:1:${SAVE_LAYER}=ro+wh /pup_new #ro+wh = Readonly branch and it has/might have whiteouts on it
-    fi
-    if [ $? -eq 0 ];then
-      [ $PUPMODE -ne 77 ] && KEEPMOUNTED="${KEEPMOUNTED}${SAVEPART} "
-      [ "$SAVE_NAME" ] && NEWUNIONRECORD="$SAVE_NAME $NEWUNIONRECORD"
-    else
-      printf "${L_ADDING_SAVE_LAYER_FAILED}\n" "$SAVE_LAYER"
-    fi
+    [ $PUPMODE -ne 77 ] && KEEPMOUNTED="${KEEPMOUNTED}${SAVEPART} "
+    [ "$SAVE_NAME" ] && NEWUNIONRECORD="$SAVE_NAME $NEWUNIONRECORD"
   fi
  ;;
  12) #replace rw
   setup_psave
   if [ "$PUPSAVE" ] ; then
     #SAVE_LAYER=/pup_rw
+    RW_DIR="$(readlink $SAVE_LAYER)"
     #setup empty /tmp on tmpfs for in stack
     rm -rf ${SAVE_LAYER}/tmp
-    #adjust stack
-    if [ "$UNIONFS" = 'overlay' ]; then
-     remount_overlay -e "s~upperdir=[^,]+~upperdir=${SAVE_LAYER}~" -e "s~workdir=[^,]+~workdir=${WORKDIR}~"
-    else
-     echo "mount -o remount,prepend:${SAVE_LAYER}=rw,mod:/mnt/tmpfs/pup_rw=ro,del:/mnt/tmpfs/pup_rw /pup_new" #debug
-     mount -o remount,prepend:${SAVE_LAYER}=rw,mod:/mnt/tmpfs/pup_rw=ro,del:/mnt/tmpfs/pup_rw /pup_new
-    fi
-    if [ $? -eq 0 ];then
-      rm -rf /mnt/tmpfs/pup_rw
-      KEEPMOUNTED="${KEEPMOUNTED}${SAVEPART} "
-      [ "$SAVE_NAME" ] && NEWUNIONRECORD="$SAVE_NAME $NEWUNIONRECORD"
-    else
-      printf "${L_ADDING_SAVE_LAYER_FAILED}\n" "$SAVE_LAYER"
-    fi
+    rm -rf /mnt/tmpfs/pup_rw
+    KEEPMOUNTED="${KEEPMOUNTED}${SAVEPART} "
+    [ "$SAVE_NAME" ] && NEWUNIONRECORD="$SAVE_NAME $NEWUNIONRECORD"
   fi
  ;;
  66) #extract to stack at new tmpfs
@@ -1287,33 +1248,15 @@
   if [ -s "$ARCHIVE_FN" ];then
     echo -n "$(printf "${L_LOADING_SAVE_ARCHIVE}" "${PUPSAVE#*,*,}" "$SAVEPART")" > /dev/console
     echo "--SAVEARCHIVE-- $ARCHIVE_FN" #debug
-    PM66_DIR='/pup_rw'
-    rm -r -f "$PM66_DIR"
-    [ -d "$PM66_DIR" ] || mkdir $PM66_DIR
-    mount -t tmpfs tmpfs $PM66_DIR
-    if [ "$UNIONFS" = 'overlay' ]; then
-      mkdir $PM66_DIR/upper $PM66_DIR/work
-      tar xf "$ARCHIVE_FN" -m -C $PM66_DIR/upper 2>/dev/null
-      STATUS=$?
-      if [ $STATUS -eq 0 ];then
-        remount_overlay -e "s~upperdir=[^,]+~upperdir=${PM66_DIR}/upper~" -e "s~workdir=[^,]+~workdir=${PM66_DIR}/work~"
-        STATUS=$?
-      fi
-    else
-      tar xf "$ARCHIVE_FN" -m -C $PM66_DIR 2>/dev/null
-      STATUS=$?
-      if [ $STATUS -eq 0 ];then
-        #replace rw branch with new populated tmpfs
-        echo "mount -o remount,prepend:${PM66_DIR}=rw,mod:/mnt/tmpfs/pup_rw=ro,del:/mnt/tmpfs/pup_rw /pup_new" #debug
-        mount -o remount,prepend:${PM66_DIR}=rw,mod:/mnt/tmpfs/pup_rw=ro,del:/mnt/tmpfs/pup_rw /pup_new
-        STATUS=$?
-      fi
-    fi
+    PM66_DIR="$RW_DIR"
+    [ -d "$PM66_DIR" ] || mkdir -p "$PM66_DIR"
+    tar xf "$ARCHIVE_FN" -m -C "$PM66_DIR" 2>/dev/null
+    STATUS=$?
     if [ $STATUS -eq 0 ];then
       SAVE_MP=''
-      rm -rf /mnt/tmpfs/pup_rw
+      ln -sv "$PM66_DIR" /pup_rw
     else
-      printf "${L_ADDING_SAVE_LAYER_FAILED}\n" "$PM66_DIR"
+      printf "${L_TAR_ARCHIVE_FAILED}\n" "$ARCHIVE_FN"
     fi
     check_status $STATUS
   fi
@@ -1387,7 +1330,7 @@
 echo "PUPMODE=$PUPMODE"
 echo "PDEV1='$P_PART'"
 echo "DEV1FS='$DEV1FS'"
-echo "PUPSFS='$PDRV'"
+echo "PUPSFS='$PUPSFS'"
 echo "PUPSAVE='$PUPSAVE'"
 echo "PMEDIA='$PMEDIA'"
 echo '#ATADRIVES is all internal ide/pata/sata drives, excluding optical, excluding usb...'
@@ -1401,12 +1344,6 @@
 echo "#The partition that has the ${DISTRO_FILE_PREFIX}save file is mounted here..."
 echo "PUP_HOME='${SAVE_MP}'"
 echo '#(in /initrd) ...note, /mnt/home is a link to it.'
-echo '#this file has extra kernel drivers and firmware...'
-echo "ZDRV='$ZDRV'"
-echo "FDRV='$FDRV'"
-echo "ADRV='$ADRV'"
-echo "YDRV='$YDRV'"
-echo "BDRV='$BDRV'"
 echo '#Partition no. override on boot drive to which session is (or will be) saved...'
 echo "PSAVEMARK='$PSAVEMARK'"
 echo "PSAVEPART='$PSAVEPART'"
@@ -1417,6 +1354,8 @@
 echo "DOMIBS='no'"
 [ -f /sbin/set_plang ] && plang_pupstate #echo
 ) > /pup_new/etc/rc.d/PUPSTATE
+cat "$DRVS_TMP_FN" >> /pup_new/etc/rc.d/PUPSTATE
+rm "$DRVS_TMP_FN"
 
 if [ "$PUPSAVE" ];then
  xBOOTCONFIG="$(grep -v '^PREVUNIONRECORD' /pup_new/etc/rc.d/BOOTCONFIG | sed -e 's/^LASTUNIONRECORD/PREVUNIONRECORD/')"
@@ -1431,17 +1370,15 @@
 
 echo "Moving mountpoints to /pup_new/initrd for after switch..." #debug
 rm -r -f "/pup_new/initrd${SAVE_LAYER}"
-OPT="move"
-[ "$UNIONFS" = 'overlay' ] && OPT="bind"
 for ONEMNT in $(mount | cut -f 3 -d ' ' | grep -v 'pup_new' | grep '^/pup_' | tr '\n' ' ');do
  mkdir -p /pup_new/initrd${ONEMNT}
- echo "mount -o $OPT $ONEMNT /pup_new/initrd${ONEMNT}" #debug
- mount -o $OPT $ONEMNT /pup_new/initrd${ONEMNT}
+ echo "mount -o move $ONEMNT /pup_new/initrd${ONEMNT}" #debug
+ mount -o move $ONEMNT /pup_new/initrd${ONEMNT}
 done
 for ONEMNT in $(mount | cut -f 3 -d ' ' | grep '^/mnt/' | tr '\n' ' ');do
  mkdir -p /pup_new/initrd${ONEMNT}
- echo "mount -o $OPT $ONEMNT /pup_new/initrd${ONEMNT}" #debug
- mount -o $OPT $ONEMNT /pup_new/initrd${ONEMNT}
+ echo "mount -o move $ONEMNT /pup_new/initrd${ONEMNT}" #debug
+ mount -o move $ONEMNT /pup_new/initrd${ONEMNT}
 done
 
 echo -------------------- # debug
